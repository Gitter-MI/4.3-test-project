Single Sprite implementation:

Sprite can walk up to the elevator and call the elevator
Sprite will call the elevator again when already in Calling State(!)
	-> since the waiting state hasn't been re-implemented this must be double-checked
		'''
		    sprite_data_new.ElevatorState.WAITING_FOR_ELEVATOR:     
            if stored_position_updated:
                call_elevator()
		'''

Sprite will re-set elevator status when walking away

-> Note: if elevator_request_is is not -1 we can use a update elevator request signal instead of calling new
	-> the sprite knows that it has just arrived. 
	-> the queue knows if this means the sprite is returning (already has a request in the queue), or not
	

Entering the elevator room needs to stop the flow: switch scene


-> we are switching to room in state component and pathfinder

Make sure to allow walking away from the elevator room when the elevator is not, yet ready
Try using a timer for the room event (like 2 seconds, then proceed) to better simulate the mechanics



- Implement real test cases to evaluate the mechanics
Same floor, different floor, walking away, returning, etc...
Trigger them from nav for example


The Ready - Enter - Cycle:
The elevator can emit ready on two events:
	a) the doors are open and the sprite has exited
	b) a sprite requests the ready status
	
The ready status is emitted in a loop to all sprites on the same floor.
The sprites will respond with an immediate callback: entering or not. 
On sprite entered:
	- if it has the same request id as the current first id in the queue: proceed
	- it does not have same request id: overwrite the first request in the queue
		if there is another request by the same sprite: delete it
		# if there is no other request by the same sprite: it means the original request got deleted
		-> Problem: The elevator could have been called twice
		
		
		
		A-1
		B-2
		C-2
		D-3


		T-A-1 goes to floor 2
		X-A-1 exits: emit ready to B-2
		Z-B-2 is not there, but C-2 is (loop)
		
		Y-C-2 enters, will be moved to the top of the queue
		Oo-B-2 remains in the queue, as before
		
		T-C-2 goes to floor 3
		X-C-2 exits emits ready D-3, because the elevator is already here anyways
		Z-D-3 can enter if available
		Y-D-3 will be moved to the top of the queue
		
		W-B-2 will be handled last: Start timer if only request on floor and request is currently queue[0]
		
		If it is the last request on the current floor and no sprite enters: timer 
		-> if current request floor number == is queue [0] and no other sprite is entering: timer
		
		While the timer is on:
		If a sprite calls the elevator we emit ready immediately, or sprite can request ready upon confirmation and
		overwrite the current first request
		
		Oo-No function needed
		T-Transit function
		
		Q-Add to queue
		L-Remove from queue
		
		
		X-emit ready to all sprites on current floor
		Y-Move current sprite's request to the top of the queue
		Z-Sprite immediate enter callback function
		
		W-Timer: remove queue[0] on timeout unless any sprite enters -> then overwrite and stop timer
		V-Immediate proceed: if no other requests on current floor, or no other sprite entering and queue not empty
		
	Elevator logic state(?):
	- on arrival when (sprite has exited, or when empty) and doors open:
		loop through all requests on the current floor 
		on callback check if queue needs to be adapted
		
		-> requests on floor checked
	
	-> regardless if a sprite enters or not, next cycle continue with processing the queue
		
		