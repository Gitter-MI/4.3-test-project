{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang2057{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\f0\fs22\lang7 ## 1. Structured Scene and Node Hierarchy Documentation\par
2D game project using Godot 4.\line\line\par
### Hierarchical Overview\par
\par
- **Main Scene** (`Node2D`)\par
  - **Building Scene** (`Node2D`)\par
    - *Attached Script:* `building.gd` (extends `Node2D`)\par
    - **Floor Scenes** *(instantiated at runtime by `building.gd`)*\par
      - **Floor_X** (`Area2D`)\par
        - **FloorSprite** (`Sprite2D`)\par
        - **CollisionShape2D** (`RectangleShape2D`)\par
        - **Marker2D**\par
        - **Doors** *(instantiated at runtime by `building.gd`)*\par
          - **Door** (`Area2D`)\par
            - *Attached Script:* `door.gd` (extends `Area2D`)\par
            - **AnimatedSprite2D**\par
            - **CollisionShape2D**\par
            - **Label**\par
  - **Sprite Scene**\par
\par
### Brief Descriptions\par
\par
- **Main Scene** (`Node2D`):\par
  - **Purpose**: Serves as the root of the game and the entry point when the game starts.\par
  - **Contains**: The `Building Scene` and possibly other UI or game elements.\par
\par
- **Building Scene** (`Node2D`):\par
  - **Purpose**: Manages the generation and configuration of the building's floors and doors.\par
  - **Script**: Attached script `building.gd` (extends `Node2D`).\par
  - **Functionality**: Uses `building.gd` to preload floor scenes and door data, generate the building structure, and add doors to the floors based on `DoorData.gd`.\par
\par
- **Floor Scenes**:\par
  - **Description**: A collection of floor instances (`floor_0`, `floor_1`, etc.) dynamically instantiated during runtime by `building.gd`.\par
\par
- **Floor_X** (`Area2D`):\par
  - **Purpose**: Represents an individual floor within the building.\par
  - **Contains**:\par
    - **FloorSprite** (`Sprite2D`): Displays the visual representation of the floor.\par
    - **CollisionShape2D** (`RectangleShape2D`): Defines the collision area for physics interactions on the floor.\par
    - **Marker2D**: Serves as a reference point for positioning doors and other elements on the floor.\par
    - **Doors**: Instantiated at runtime based on data from `DoorData.gd`.\par
\par
- **Door** (`Area2D`):\par
  - **Purpose**: Represents an individual door on a floor.\par
  - **Script**: Attached script `door.gd` (extends `Area2D`).\par
  - **Contains**:\par
    - **AnimatedSprite2D**: Displays door animations.\par
    - **CollisionShape2D**: Defines the collision area for interaction detection.\par
    - **Label**: Displays information such as the door number or owner.\par
\par
- **Sprite Scene**:\par
  - **Purpose**: [To be defined; likely contains additional sprites or UI elements used in the game.]\par
\par
### Explicit Relationships\par
\par
- **Main Scene** includes **Building Scene** as a child node.\par
- **Building Scene** uses the `building.gd` script to manage building generation.\par
- **building.gd** extends `Node2D` and is attached to **Building Scene**.\par
- **building.gd** instantiates **Floor Scenes** and **Door** nodes during runtime.\par
- **Door** nodes are managed by the `door.gd` script, which extends `Area2D`.\par
- **door.gd** relies on its child node **AnimatedSprite2D** to display door animations.\par
- **DoorData.gd** provides configuration data used by `building.gd` to instantiate and configure doors.\par
\par
---\par
\par
## 2. Script Summaries and Responsibilities\par
\par
### High-Level Overviews\par
\par
#### `building.gd`\par
\par
- **Extends**: `Node2D`.\par
- **Attached to**: **Building Scene** node.\par
- **Purpose**: Manages the procedural generation of the building.\par
- **Responsibilities**:\par
  - Preloads floor scenes and door data (`DoorData.gd`).\par
  - Instantiates and positions floors within the building.\par
  - Configures collision shapes and markers for floors.\par
  - Adds doors to each floor based on data from `DoorData.gd`.\par
\par
#### `door.gd`\par
\par
- **Extends**: `Area2D`.\par
- **Attached to**: **Door** nodes.\par
- **Purpose**: Controls the behavior and appearance of individual doors.\par
- **Responsibilities**:\par
  - Configures doors based on provided data from `DoorData.gd`.\par
  - Manages door states (open or closed).\par
  - Updates door animations accordingly.\par
  - Sets up collision shapes for interaction detection.\par
\par
#### `DoorData.gd`\par
\par
- **Extends**: `Resource`.\par
- **Class Name**: `DoorData`.\par
- **Purpose**: Provides door configuration data for the building generation process.\par
- **Structure**:\par
  - Contains an exported array `doors`, which holds dictionaries with door properties.\par
\par
### Function Descriptions\par
\par
#### `building.gd`\par
\par
- **`_ready()`**:\par
  - **Description**: Initializes the building generation process when the `Building Scene` is ready.\par
  - **Actions**:\par
    - Loads door data resource (`DoorData.gd`).\par
    - Calls `generate_building()` to start building generation.\par
\par
- **`generate_building()`**:\par
  - **Description**: Generates the building structure by instantiating floors and adding doors.\par
  - **Actions**:\par
    - Iterates through preloaded floor scenes.\par
    - Instantiates each floor using `instantiate_floor()`.\par
    - Positions floors with `position_floor()`.\par
    - Configures collision shapes and markers.\par
    - Calls `add_doors_to_floor()` for each floor.\par
\par
- **`add_doors_to_floor(floor_instance, floor_index)`**:\par
  - **Description**: Adds doors to a specific floor based on door data.\par
  - **Actions**:\par
    - Filters doors from `DoorData.gd` for the current floor.\par
    - For each door data:\par
      - Calculates door position with `get_door_slot_position()`.\par
      - Instantiates a `Door` node.\par
      - Configures the door with `configure_door()`.\par
\par
- **`configure_door(door_instance, door_data)`**:\par
  - **Description**: Configures a door instance with specific data.\par
  - **Actions**:\par
    - Calls `door_instance.configure(door_data)` to apply settings.\par
\par
- **`get_door_slot_position(floor_instance, slot_index)`**:\par
  - **Description**: Calculates the position of a door on a floor.\par
  - **Actions**:\par
    - Determines horizontal position based on slot index and floor width.\par
    - Aligns door vertically with the floor's marker.\par
\par
#### `door.gd`\par
\par
- **`_ready()`**:\par
  - **Description**: Initializes the door when the node is ready.\par
  - **Actions**:\par
    - Calls `setup_door()` to set initial state.\par
\par
- **`setup_door()`**:\par
  - **Description**: Sets up the door's nodes and initial state.\par
  - **Actions**:\par
    - Checks for required child nodes (`AnimatedSprite2D`, `CollisionShape2D`).\par
    - Sets door to initial closed state using `set_door_state()`.\par
\par
- **`configure(door_data)`**:\par
  - **Description**: Configures the door based on provided data.\par
  - **Actions**:\par
    - Sets `door_type` from `door_data`.\par
    - Calls `setup_door()` to apply changes.\par
    - Updates collision shape with `update_collision_shape()`.\par
\par
- **`set_door_state(new_state)`**:\par
  - **Description**: Changes the door's state (open or closed).\par
  - **Actions**:\par
    - Updates `current_state`.\par
    - Changes animation on `AnimatedSprite2D`.\par
\par
- **`update_collision_shape()`**:\par
  - **Description**: Adjusts collision shape to match door's visual representation.\par
  - **Actions**:\par
    - Calculates dimensions based on current sprite.\par
    - Updates `CollisionShape2D` extents.\par
\par
### Explicit Relationships\par
\par
- **`building.gd`**:\par
  - Attached to **Building Scene** (`Node2D`).\par
  - Manages **Floor_X** nodes (`Area2D`) and instantiates **Door** nodes.\par
  - Uses data from `DoorData.gd` to configure doors.\par
\par
- **`door.gd`**:\par
  - Attached to **Door** nodes (`Area2D`).\par
  - Relies on **AnimatedSprite2D** to display animations.\par
  - Uses `door_data` to configure door appearance and behavior.\par
\par
- **`DoorData.gd`**:\par
  - Provides door configuration data to `building.gd`.\par
  - Contains properties used by `door.gd` for individual door setup.\par
\par
---\par
\par
## 3. Resource and Data Structures Documentation\par
\par
### Custom Resources\par
\par
#### `DoorData.gd`\par
\par
- **Extends**: `Resource`.\par
- **Class Name**: `DoorData`.\par
- **Purpose**: Stores an array of door data dictionaries for building generation.\par
- **Structure**:\par
  - **`doors`**: Exported array containing door data dictionaries.\par
\par
### Data Field Definitions\par
\par
Each door in the `doors` array is a dictionary with the following fields:\par
\par
- **`index`** (`int`):\par
  - **Description**: Unique identifier for the door.\par
\par
- **`floor_number`** (`int`):\par
  - **Description**: Specifies the floor where the door is located.\par
\par
- **`door_slot`** (`int`):\par
  - **Description**: Determines the door's position on the floor.\par
\par
- **`door_type`** (`int`):\par
  - **Description**: Indicates the visual style or type of the door.\par
\par
- **`owner`** (`String`):\par
  - **Description**: Name of the owner or entity associated with the door.\par
\par
- **`tooltip`** (`String`):\par
  - **Description**: Additional information displayed when interacting with the door.\par
\par
### Integration with Scripts\par
\par
- **`building.gd`**:\par
  - Preloads `DoorData.gd` to access door configuration data.\par
  - Uses the `doors` array to instantiate and configure doors on each floor.\par
\par
- **`door.gd`**:\par
  - Receives individual `door_data` dictionaries during configuration.\par
  - Uses `door_data` fields to set door properties and animations.\par
\par
---\par
\par
## 4. Flow of Execution and Interaction\par
\par
### Process Overview\par
\par
1. **Game Start**:\par
   - The **Main Scene** (`Node2D`) is loaded as the game's entry point.\par
   - **Building Scene** (`Node2D`) is instantiated within the Main Scene.\par
\par
2. **Building Generation**:\par
   - `building.gd` script runs `_ready()` function.\par
   - Loads `DoorData.gd` and preloads floor scenes.\par
   - Calls `generate_building()` to start building creation.\par
\par
3. **Floor Instantiation**:\par
   - Iterates through floor scenes in `FLOOR_SCENES`.\par
   - For each floor:\par
     - Instantiates floor using `instantiate_floor()`.\par
     - Positions floor with `position_floor()`.\par
     - Configures collision shapes and markers.\par
\par
4. **Door Placement**:\par
   - Calls `add_doors_to_floor()` for each floor.\par
   - Filters doors for the current floor from `DoorData.gd`.\par
   - For each door:\par
     - Calculates position with `get_door_slot_position()`.\par
     - Instantiates a **Door** node.\par
     - Configures the door using `configure_door()`.\par
\par
5. **Door Configuration**:\par
   - Each **Door** node runs the `door.gd` script.\par
   - `configure(door_data)` applies specific settings to the door.\par
   - Door animations and collision shapes are updated accordingly.\par
\par
6. **Completion**:\par
   - The building is fully generated with all floors and doors properly configured.\par
\par
### Interaction Points\par
\par
- **Doors**:\par
  - **Collision Detection**: Doors are `Area2D` nodes with `CollisionShape2D`, enabling interaction detection.\par
  - **State Management**: Doors can change states (open/closed) using `set_door_state()`.\par
  - **Animations**: Visual feedback provided through `AnimatedSprite2D`.\par
\par
- **Potential User Interactions**:\par
  - **Opening/Closing Doors**: Players can interact with doors to change their state (implementation pending).\par
  - **Tooltips and Labels**: Information displayed when the player is near a door.\par
\par
---\par
\par
## 5. Additional Enhancements for LLM-Friendliness\par
\par
### Clear Language and Formatting\par
\par
- **Consistent Terminology**: Used precise terms like "instantiates," "configures," and "attaches."\par
- **Simple Sentences**: Broke down complex sentences for clarity.\par
- **Direct Descriptions**: Clearly stated the purpose and actions of each component.\par
\par
### Explicit References\par
\par
- **Script Relationships**:\par
  - **`building.gd`** is attached to **Building Scene** and manages floor and door instantiation.\par
  - **`door.gd`** is attached to **Door** nodes and manages door behavior.\par
- **Node Dependencies**:\par
  - **`door.gd`** relies on child nodes like **AnimatedSprite2D** and **CollisionShape2D**.\par
- **Data Flow**:\par
  - **`DoorData.gd`** provides data to **`building.gd`**, which passes it to **`door.gd`**.\par
\par
\par
}
 